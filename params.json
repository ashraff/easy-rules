{"name":"Easy Rules","tagline":"Apply your business rules without headache!","body":"## What is Easy Rules?\r\n\r\nEasy Rules is a simple yet powerful Java Rules Engine.\r\n\r\nIt provides useful abstractions to define business rules and apply them easily.\r\n\r\n## Documentation\r\n\r\n### Quick introduction\r\n\r\nMost business rules can be represented by the following rule definition :\r\n\r\n * Name : Unique rule name\r\n\r\n * Description : A brief description of the rule\r\n\r\n * Priority : Rule priority regarding to other rules\r\n\r\n * Conditions : Set of conditions that should be satisfied to apply the rule\r\n\r\n * Actions : Set of actions to perform when conditions are satisfied\r\n\r\nEasy Rules simply provides an abstraction for each of these key points that define a business rule.\r\n\r\n### Easy Rules Key API\r\n\r\nA rule in Easy Rules is an instance of the `Rule` class :\r\n\r\n```java\r\npublic class Rule implements Comparable<Rule> {\r\n\r\n    private String name;\r\n\r\n    private String description;\r\n\r\n    private int priority;\r\n\r\n    public boolean evaluateConditions() {return false;}\r\n\r\n    public void performActions() throws Exception {}\r\n\r\n    //getters, setters and compareTo methods omitted\r\n\r\n}\r\n```\r\n\r\nThe `name`, `description` and `priority` attributes are self explanatory.\r\n\r\nThe `evaluateConditions` method encapsulates conditions that must evaluate to TRUE to trigger the rule.\r\n\r\nThe `performActions` method encapsulates actions that should be performed when rule's conditions are satisfied.\r\n\r\nOf course, evaluating conditions and performing actions should be delegated to other objects if used across multiple rules.\r\n\r\n### Easy Rules engine\r\n\r\nEasy Rules engine handles a registry of rules with unique names. These rules are applied according to their priorities.\r\nBy default, lower values represent higher priorities. To override this default behavior, you can extend the `Rule` class\r\nand override `compareTo` method to provide a custom priority strategy.\r\n\r\nEasy Rules provide the following parameters:\r\n\r\n| Parameter              | Type     | Required | Default  | Description                                                      |\r\n|:----------------------:|:--------:|:--------:|:--------:|------------------------------------------------------------------|\r\n| skipOnFirstAppliedRule | boolean  | no       | false    | skip next applicable rules when a rule is applied                |\r\n| rulePriorityThreshold  | int      | no       | 10000    | skip next rules if priority exceeds a user defined threshold.    |\r\n\r\n## Hello World Sample\r\n\r\nThis sample shows how to use Easy Rules to say Hello to only duke's friends.\r\nThe program asks the user if he/she is a friend of duke and says Hello only if he/she responds yes!\r\n\r\nThe rule class is the following :\r\n\r\n```java\r\npublic class HelloWorldRule extends Rule {\r\n\r\n    /**\r\n     * The user input\r\n     */\r\n    private String input;\r\n\r\n    public HelloWorldRule(String name, String description, int priority) {\r\n        super(name, description, priority);\r\n    }\r\n\r\n    @Override\r\n    public boolean evaluateConditions() {\r\n        //The rule should be applied only if the user's response is yes (duke friend)\r\n        return input.equalsIgnoreCase(\"yes\");\r\n    }\r\n\r\n    @Override\r\n    public void performActions() throws Exception {\r\n        //When rule conditions are satisfied, prints 'Hello duke's friend!' to the console\r\n        System.out.println(\"Hello duke's friend!\");\r\n    }\r\n\r\n    public void setInput(String input) {\r\n        this.input = input;\r\n    }\r\n}\r\n```\r\n\r\nThe launcher class is the following :\r\n\r\n```java\r\npublic class HelloWorldSampleLauncher {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(\"Are you a friend of duke? [yes/no]:\");\r\n        String input = scanner.nextLine();\r\n\r\n        /**\r\n         * Define the rule\r\n         */\r\n        HelloWorldRule helloWorldRule = new HelloWorldRule(\"Hello World rule\", \"Say Hello to only duke's friends\", 1);\r\n\r\n        /**\r\n         * Set data to operate on\r\n         */\r\n        helloWorldRule.setInput(input.trim());\r\n\r\n        /**\r\n         * Create a default rules engine and register the business rule\r\n         */\r\n        RulesEngine rulesEngine = new DefaultRulesEngine();\r\n        rulesEngine.registerRule(helloWorldRule);\r\n\r\n        /**\r\n         * Fire rules\r\n         */\r\n        rulesEngine.fireRules();\r\n\r\n    }\r\n}\r\n```\r\n\r\nMore samples of how to use Easy Rules can be found [here][].\r\n\r\n## License\r\nEasy Rules is released under the [MIT License][].\r\n\r\n[here]: https://github.com/benas/easy-rules/tree/master/easyrules-samples\r\n[MIT License]: http://opensource.org/licenses/mit-license.php/","google":"UA-39540718-1","note":"Don't delete this file! It's used internally to help with page regeneration."}